import fs from "fs";
import { execSync } from "child_process";
import esbuild from "esbuild";
import toml from "@iarna/toml";
import { fileURLToPath } from "url";

export default function (options) {
  const adapter = {
    name: "@firmanc/sveltekit-adapter-cfw",
    async adapt({ utils }) {
      const { site } = validate_config(utils);

      const bucket = site.bucket;
      const entrypoint = site["entry-point"] || "workers-site";

      const copy = fileURLToPath(new URL("./copy", import.meta.url));

      utils.rimraf(bucket);
      utils.rimraf(entrypoint);

      utils.log.info("Installing worker dependencies...");
      utils.copy(
        `${copy}/_package.json`,
        ".svelte-kit/cloudflare-workers/package.json"
      );

      const stdout = execSync("npm install", {
        cwd: ".svelte-kit/cloudflare-workers",
      });
      utils.log.info(stdout.toString());

      utils.log.minor("Generating worker...");
      utils.copy(`${copy}/entry.js`, ".svelte-kit/cloudflare-workers/entry.js");

      const defaultOptions = {
        entryPoints: [".svelte-kit/cloudflare-workers/entry.js"],
        outfile: `${entrypoint}/index.js`,
        bundle: true,
        target: "es2020",
        platform: "browser",
      };

      const buildOptions =
        options && options.esbuild
          ? await options.esbuild(defaultOptions)
          : defaultOptions;

      await esbuild.build(buildOptions);

      fs.writeFileSync(
        `${entrypoint}/package.json`,
        JSON.stringify({
          private: true,
          version: "0.0.1",
          description: "Worker site generated by SvelteKit",
          main: "index.js",
          dependencies: {
            "@cloudflare/kv-asset-handler": "~0.1.2",
          },
        })
      );

      utils.log.info("Prerendering static pages...");
      await utils.prerender({
        dest: bucket,
      });

      utils.log.minor("Copying assets...");
      utils.copy_static_files(bucket);
      utils.copy_client_files(bucket);
    },
  };

  return adapter;
}

function validate_config(utils) {
  if (fs.existsSync("wrangler.toml")) {
    let wrangler_config;

    try {
      wrangler_config = toml.parse(fs.readFileSync("wrangler.toml", "utf-8"));
    } catch (err) {
      err.message = `Error parsing wrangler.toml: ${err.message}`;
      throw err;
    }

    if (!wrangler_config.site || !wrangler_config.site.bucket) {
      throw new Error(
        "You must specify site.bucket in wrangler.toml. Consult https://developers.cloudflare.com/workers/platform/sites/configuration"
      );
    }

    return wrangler_config;
  }

  utils.log.error(
    "Consult https://developers.cloudflare.com/workers/platform/sites/configuration on how to setup your site"
  );

  utils.log(
    `
		Sample wrangler.toml:
		name = "<your-site-name>"
		type = "javascript"
		account_id = "<your-account-id>"
		workers_dev = true
		route = ""
		zone_id = ""
		[site]
		bucket = "./.cloudflare/assets"
		entry-point = "./.cloudflare/worker"`
      .replace(/^\t+/gm, "")
      .trim()
  );

  throw new Error("Missing a wrangler.toml file");
}
